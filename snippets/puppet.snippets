snippet cl
	# Class ${1:class_name}
	#
	#   ${2:class description}
	#
	# Parameters:
	#
	#   ${3:none}
	#
	# Actions:
	#
	#   ${4:actions description - What does this class do?}
	#
	# Requires:
	#
	#   ${5:nothing}
	#
	# Sample Usage:
	#
	# node default {
	#   include $1
	# }
	class $1 {

	  ${6:# code}

	}
snippet clp
	# Class ${1:class_name}
	#
	#   ${2:class description}
	#
	# Parameters:
	#
	#   ${3:none}
	#
	# Actions:
	#
	#   ${4:actions description - What does this class do?}
	#
	# Requires:
	#
	#   ${5:nothing}
	#
	# Sample Usage:
	#
	# node default {
	#   include $1
	# }
	class $1 ($${6:variable}) {

	  ${7:# code}

	}
snippet clin
	# Class ${1:class_name}
	#
	#   ${2:class description}
	#
	# Parameters:
	#
	#   ${3:none}
	#
	# Actions:
	#
	#   ${4:actions description - What does this class do?}
	#
	# Requires:
	#
	#   ${5:nothing}
	#
	# Sample Usage:
	#
	# node default {
	#   include $1
	# }
	class $1 inherits ${6:classname} {

	  ${7:# code}

	}
snippet def
	# Define ${1:define_name}
	#
	#   ${2:define description}
	#
	# Parameters:
	#
	#   ${3:none}
	#
	# Actions:
	#
	#   ${4:define description - What does this define do?}
	#
	# Requires:
	#
	#   ${5:nothing}
	#
	# Sample Usage:
	#
	# node default {
	#   $1 { 'name':
	#     ${6:option} => '${7:option}',
	#   }
	# }
	define $1($${8:args}) {

	  ${9:# code}

	}
snippet node
	node '${1:name}' {
	  ${2:# code}
	}
snippet nodein
	node '${1:name}' inherits '${2:name}' {
	  ${3:# code}
	}
#############################################################################
# CONDITIONALS
snippet if
	if $${1:variable} ${2:==} ${3:"value"} {
	  ${4:# code}
	}
snippet ife
	if $${1:variable} ${2:==} ${3:"value"} {
	  ${4:# code}
	}
	  ${5:# code}
	}
snippet el
	elsif $${1:variable} {
	  ${2:# code}
	}
snippet elif
	elsif $${1:variable} {
	  ${2:# code}
	} else {
	  ${3:# code}
	}
snippet $?
	$${1:variable} ? {
	  ${2:value} => ${3:result},
	  default => ${4:result},
	},
snippet case
	case $${1:variable} {
	  ${2:value}: {
	    ${3:# code}
	  },
	  default: {
	  ${4:# code}
	  },
	}
#############################################################################
# BUILT IN FUNCTIONS
snippet alert
	alert("${1:string}")
snippet crit
	crit("${1:string}")

snippet debug
	debug("${1:string}")

snippet de
	define ${1} (${2}) {
	  ${3}
	}
snippet defined
	defined(${1:resource})
snippet dir
	file { '${1:path}':
	  ensure  => directory,
	  owner   => '${2:owner}',
	  group   => '${3:group}',
	  mode    => '${4:mode}',
	  require => ${5:require},
	}
snippet emerg
	emerg("${1:string}")
snippet err
	err("${1:string}")
snippet exec
	exec { '${1:name}':
	  command => '${2:$1}',
	  user    => '${3:root}',
	  ${4}    => ${5}
	}
snippet extlookup
	extlookup("${1:key}", "${2:default value}")
snippet fail
	fail("${1:string}")
snippet file
	file { '${1:path}':
	  ensure  => ${2:file},
	  owner   => '${3:owner}',
	  group   => '${4:group}',
	  mode    => '${5:mode}',
	  source  => 'puppet:///modules/${6:source}',
	  require => ${7:require},
	}
snippet fqdn
	fqdn_rand(${1:range})
snippet generate
	generate("${1:command}")
snippet inc
	include ${1:classname}
snippet info
	info("${1:string}")
snippet inline
	inline_template("${1:string}")
snippet ln
	file { '${1:source}':
	  ensure  => link,
	  target  => '${2:target}',
	  require => ${3:require},
	}
snippet md5
	md5("${1:string}")
snippet notice
	notice("${1:string}")
snippet p
	package { '${1:package name}':
	  ensure => ${2:present}
	}
snippet realize
	realize(${1:string})
snippet regsubst
	regsubst($${1:target}, /${2:regexp}/, "${3:replacement}")
snippet require
	require ${1:classname}
snippet search
	search(${1:namespace})
snippet sha1
	sha1(${1:string})
snippet quote
	shellquote(${1:args})
snippet se
	service { '${1:service}':
	  ensure    => ${2:running},
	  enable    => ${3:true},
	  hasstatus => true,
	}
snippet service
	service { '${1:service}':
	  ensure    => ${2:running},
	  enable    => ${3:true},
	  hasstatus => true,
	}
snippet split
	split($${1:string}, "${2:regexp}")
snippet sprintf
	sprintf("${1:string}", ${2:args})
snippet tag
	tag("${1:string}")
snippet tagged
	tagged("${1:string}")
snippet template
	template("${1:path}")
snippet versioncmp
	versioncmp("${1:a}", "${2:b}")
snippet warn
	warning("${1:string}")
